def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
  // The Android Gradle plugin is only required when opening the android folder stand-alone.
  // This avoids unnecessary downloads and potential conflicts when the library is included as a
  // module dependency in an application project.
  if (project == rootProject) {
    repositories {
      google()
      mavenCentral()
    }
    dependencies {
      classpath("com.android.tools.build:gradle:8.7.2")
//      classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
    }
  }
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  if (major == 7 && minor >= 3) {
    return true
  }

  return major >= 8
}

def isNewArchitectureEnabled() {
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

android {
  if (supportsNamespace()) {
    namespace "com.rnmaps.maps"
  }

  if (rootProject.hasProperty("ndkPath")) {
    ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
    ndkVersion rootProject.ext.ndkVersion
  }

  compileSdk safeExtGet('compileSdkVersion', 35)

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 21)
    targetSdkVersion safeExtGet('targetSdkVersion', 35)

    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    ndk {
      abiFilters(*reactNativeArchitectures())
    }
  }
  packagingOptions {
    excludes = [
            "META-INF",
            "META-INF/**",
            "**/libreact_render*.so",
    ]
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
                "generated/java",
                "generated/jni"
        ]
      }
    }
  }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

}

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}


repositories {
  mavenLocal()
  mavenCentral()
  google()
}

dependencies {
    implementation "com.facebook.react:react-android"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.1.10"
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
  implementation "com.google.android.gms:play-services-base:${safeExtGet('playServicesVersion', '18.5.0')}"
  implementation "com.google.android.gms:play-services-maps:${safeExtGet('playServicesVersion', '19.0.0')}"
  implementation "com.google.android.gms:play-services-location:21.3.0"
  implementation 'com.google.maps.android:android-maps-utils:3.10.0'
  implementation "androidx.work:work-runtime:2.10.0"
}
